/* 
 * PROFET Copyright 2015 (c) Data Mining and Machine Learning Group,
 * National University of Ireland Galway.  
 * This file is a part of PROFET  
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package Nodes.Frames;

import Nodes.StatisticalDistributions.LinearGaussian;
import Nodes.StatisticalDistributions.StatisticalDistribution;
import Nodes.StatisticalDistributions.TruncatedGaussian;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

/**
 *
 * @author Administrator
 */
public class LinearGaussDistPanel extends javax.swing.JPanel {

    /**
     * Creates new form LinearGaussDistPanel
     */
    public LinearGaussDistPanel() {
        initComponents();
    }
    private LinearGaussian distribution;
    
    public LinearGaussDistPanel(StatisticalDistribution dist) {
        initComponents();
        
          this.distribution = (LinearGaussian)dist;
            jTextFieldMean.setText(Double.toString(distribution.GetMean()));
            jTextFieldstd.setText(Double.toString(distribution.GetStd()));
      
       // else if(dist.getClass() == Nodes.StatisticalDistributions.UniformDistribution.class)
        
        AddChangeListeners();
    }
    private void AddChangeListeners()
     {
         AddChangeListener(jTextFieldMean);
         AddChangeListener(jTextFieldstd);
     }
     private void AddChangeListener(JTextField field)
    {  
        field.getDocument().addDocumentListener(new DocumentListener() {
        @Override
        public void changedUpdate(DocumentEvent e) {
           ModelParameterNodeWindow p = (ModelParameterNodeWindow) getParent().getParent();
           p.UpdateButtonChangeState(true);
           // parent.UpdateButtonChangeState(true);
            // text was changed
        }
        @Override
        public void removeUpdate(DocumentEvent e) {
            
            ModelParameterNodeWindow p = (ModelParameterNodeWindow) getParent().getParent();
           p.UpdateButtonChangeState(true);
            
           // parent.UpdateButtonChangeState(true);
            // text was deleted
        }
       @Override
        public void insertUpdate(DocumentEvent e) {
          ModelParameterNodeWindow p = (ModelParameterNodeWindow) getParent().getParent();
           p.UpdateButtonChangeState(true);
            ///parent.UpdateButtonChangeState(true);
            // text was inserted
       }
        });
        
    }
    private boolean isNumeric(String str)
    {
        try 
        {  
            double d = Double.parseDouble(str);  
        }  
        catch(NumberFormatException nfe)  
        {  
            return false;  
        }  
        return true;  
    }
     private void SetDistribution()
     {
         distribution.SetStd(Double.parseDouble(jTextFieldstd.getText()));
         distribution.SetMean(Double.parseDouble(jTextFieldMean.getText()));
     }
     private boolean isEverythingNumeric()
     {
         
        if (isNumeric(jTextFieldstd.getText())
                && isNumeric(jTextFieldMean.getText()))
                {
                    return true;
                }
        else
        {
            return false;
        }
         
     }
    public boolean Validate()
    {
        boolean retVal = false;
        if (!isEverythingNumeric())
        {
            JOptionPane.showMessageDialog(this, "Incorrect Input:\n "
                    + "Please Enter numeric values only", 
                   "Error", JOptionPane.ERROR_MESSAGE);
                retVal = false;
        }
        else
        {
            SetDistribution();
            retVal = true;
        }
        return retVal;
    }
        public LinearGaussian GetDistribution()
    {
        return distribution;
        
    }

    /**
     * This method is
     * called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextFieldstd = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextFieldMean = new javax.swing.JTextField();

        setPreferredSize(new java.awt.Dimension(547, 100));

        jTextFieldstd.setText("jTextField4");

        jLabel4.setText("Std. Dev:");

        jLabel3.setText("Mean:");

        jTextFieldMean.setText("jTextField3");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextFieldMean)
                    .addComponent(jTextFieldstd, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(182, 182, 182))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextFieldMean, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jTextFieldstd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JTextField jTextFieldMean;
    private javax.swing.JTextField jTextFieldstd;
    // End of variables declaration//GEN-END:variables
}
