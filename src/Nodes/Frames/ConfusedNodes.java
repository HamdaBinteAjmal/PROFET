/* 
 * PROFET Copyright 2015 (c) Data Mining and Machine Learning Group,
 * National University of Ireland Galway.  
 * This file is a part of PROFET  
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package Nodes.Frames;

import Nodes.Constant;
import Nodes.GlobalLists;
import Nodes.ModelParameterNode;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import javax.swing.DefaultListModel;

/**
 *
 * @author Administrator
 */
public class ConfusedNodes 
{

   
    
public static class ConfusedNodesInner extends javax.swing.JPanel {

    /**
     * Creates new form ConfusedNodes
     */
    private static DefaultListModel<String> ConstantsListModel = new DefaultListModel<>();
    private static DefaultListModel<String> ModelParamsListModel = new DefaultListModel<>();
//JList<String> list = new JList<>( model );
    //private ArrayList<JRadioButtonGroup> checkBoxList;//= new ArrayList<>();
     private void FromModelParamToConst() {
      
        int indices[] = ModelParameters.getSelectedIndices();
        if (indices.length > 0)
       {
            for (int i = indices.length - 1; i >= 0; i--)
        {
            String newConst = (String)ModelParamsListModel.getElementAt(indices[i]);
            ConstantsListModel.addElement(newConst);            
            GlobalLists.AddConstant(newConst);
        }
             for (int i = indices.length - 1; i >= 0; i--)
        {
            ModelParamsListModel.removeElementAt(indices[i]);//o
        }
       }
    }

    public ConfusedNodesInner() {
        initComponents();
        Constants.setModel(ConstantsListModel);
        ModelParameters.setModel(ModelParamsListModel);
        PopulateUI();
       
    }
    private static void PopulateUI()
    {
        PopulateConstants();
        PopulateModelParameters();
    }
    private static void PopulateModelParameters()
    {
        ModelParamsListModel.removeAllElements();
        HashMap<ModelParameterNode, Integer> list = GlobalLists.ModelParameters;
        Iterator it = list.entrySet().iterator();
        while (it.hasNext())
        {
            Map.Entry pair = (Map.Entry)it.next();
            ModelParameterNode node = (ModelParameterNode)pair.getKey();
               
            ModelParamsListModel.addElement(pair.getKey().toString());
            
            
        }
    }
        
    private static void PopulateConstants()
    {
        ConstantsListModel.removeAllElements();
        HashMap<Constant, Integer> list = GlobalLists.Constants;
        Iterator it = list.entrySet().iterator();
        while (it.hasNext())
        {
            Map.Entry pair = (Map.Entry)it.next();
            ConstantsListModel.addElement(pair.getKey().toString());
            
        }
        //Constants.setListData(vec);
    }
    
    @Override
    public String toString()
    {
        return "Choose Model Parameters";
    }    
    private void FromConstToModelParam()
    {
       int indices[] = Constants.getSelectedIndices();
       if (indices.length > 0)
       {
           for (int i = indices.length - 1; i >= 0; i--)
            {
                String newConst = (String)ConstantsListModel.getElementAt(indices[i]);
                ModelParamsListModel.addElement(newConst);            
                GlobalLists.AddModelParameter(newConst);
            }
            for (int i = indices.length - 1; i >= 0; i--)
            {
                ConstantsListModel.removeElementAt(indices[i]);//o
            }
       }
    }
    
   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        Constants = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        ModelParameters = new javax.swing.JList();
        jButtonToModelParam = new javax.swing.JButton();
        jButtonToConstant = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setMinimumSize(new java.awt.Dimension(600, 560));
        setPreferredSize(new java.awt.Dimension(600, 560));

        Constants.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(Constants);

        ModelParameters.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(ModelParameters);

        jButtonToModelParam.setText(">>");
        jButtonToModelParam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonToModelParamActionPerformed(evt);
            }
        });

        jButtonToConstant.setText("<<");
        jButtonToConstant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonToConstantActionPerformed(evt);
            }
        });

        jLabel1.setLabelFor(Constants);
        jLabel1.setText("Constants");

        jLabel2.setLabelFor(ModelParameters);
        jLabel2.setText("Model Parameters");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(71, 71, 71)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonToModelParam, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonToConstant, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(30, 30, 30)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addGap(52, 52, 52)))
                .addGap(76, 76, 76))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(158, 158, 158)
                        .addComponent(jButtonToModelParam, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonToConstant, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 465, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)))
                .addContainerGap(37, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonToModelParamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonToModelParamActionPerformed
        // TODO add your handling code here:
        FromConstToModelParam();
    }//GEN-LAST:event_jButtonToModelParamActionPerformed

    private void jButtonToConstantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonToConstantActionPerformed
        // TODO add your handling code here:
        FromModelParamToConst();
    }//GEN-LAST:event_jButtonToConstantActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JList Constants;
    private static javax.swing.JList ModelParameters;
    private static javax.swing.JButton jButtonToConstant;
    private static javax.swing.JButton jButtonToModelParam;
    private static javax.swing.JLabel jLabel1;
    private static javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
}